// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySchool.Models;

namespace MySchool.Migrations
{
    [DbContext(typeof(ngSchoolContext))]
    [Migration("20190702121052_SeedMenus1")]
    partial class SeedMenus1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MySchool.Models.Batches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Batch")
                        .HasColumnName("batch")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("enddate")
                        .HasColumnType("date");

                    b.Property<bool?>("Isactive")
                        .HasColumnName("isactive");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("startdate")
                        .HasColumnType("date");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("MySchool.Models.ClassFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FeesType")
                        .HasColumnName("fees_type")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Classid");

                    b.ToTable("ClassFees");
                });

            modelBuilder.Entity("MySchool.Models.ClassSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("Datecreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<int?>("Subjectid")
                        .HasColumnName("subjectid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Classid");

                    b.HasIndex("Staffid")
                        .HasName("IX_ClassSubjects_Staffid");

                    b.HasIndex("Subjectid");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("MySchool.Models.ClassTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("From")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("from")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<DateTime?>("To")
                        .HasColumnName("to")
                        .HasColumnType("datetime");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Classid");

                    b.HasIndex("Staffid");

                    b.HasIndex("Userid");

                    b.ToTable("ClassTeacher");
                });

            modelBuilder.Entity("MySchool.Models.DailyExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(500);

                    b.Property<string>("Receiptno")
                        .HasColumnName("receiptno")
                        .HasMaxLength(500);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("DailyExpenses");
                });

            modelBuilder.Entity("MySchool.Models.LeaveApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datefrom")
                        .HasColumnName("datefrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("Dateto")
                        .HasColumnName("dateto")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<long>("Leavetypeid")
                        .HasColumnName("leavetypeid");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasMaxLength(500);

                    b.Property<int>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Leavetypeid");

                    b.HasIndex("Staffid");

                    b.ToTable("LeaveApplication");
                });

            modelBuilder.Entity("MySchool.Models.MCast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Castname")
                        .HasColumnName("castname")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(5);

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("mCast");
                });

            modelBuilder.Entity("MySchool.Models.MClasses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datemodified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Standard")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("standard")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("mClasses");
                });

            modelBuilder.Entity("MySchool.Models.MDesignation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Designname")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("designname")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Isdefault")
                        .HasColumnName("isdefault");

                    b.HasKey("Id");

                    b.ToTable("mDesignation");
                });

            modelBuilder.Entity("MySchool.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasMaxLength(50);

                    b.Property<bool?>("Isdefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isdefault")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Menu1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<int?>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("Url")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("url")
                        .HasDefaultValueSql("('')");

                    b.Property<bool?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("MySchool.Models.Messages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Datecreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(3);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MySchool.Models.MessagesGuardians", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Delivered")
                        .HasColumnName("delivered")
                        .HasColumnType("datetime");

                    b.Property<long>("Guardianid")
                        .HasColumnName("guardianid");

                    b.Property<long>("Messageid")
                        .HasColumnName("messageid");

                    b.Property<DateTime?>("Read")
                        .HasColumnName("read")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Guardianid");

                    b.HasIndex("Messageid");

                    b.ToTable("MessagesGuardians");
                });

            modelBuilder.Entity("MySchool.Models.MessagesStudents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Delivered")
                        .HasColumnName("delivered")
                        .HasColumnType("datetime");

                    b.Property<long>("Messageid")
                        .HasColumnName("messageid");

                    b.Property<DateTime?>("Read")
                        .HasColumnName("read")
                        .HasColumnType("datetime");

                    b.Property<int>("Studentid")
                        .HasColumnName("studentid");

                    b.HasKey("Id");

                    b.HasIndex("Messageid");

                    b.HasIndex("Studentid");

                    b.ToTable("MessagesStudents");
                });

            modelBuilder.Entity("MySchool.Models.MFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FeesType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fees_type")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("mFees");
                });

            modelBuilder.Entity("MySchool.Models.MGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gname")
                        .HasColumnName("gname")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("mGender");
                });

            modelBuilder.Entity("MySchool.Models.MHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dates")
                        .HasColumnName("dates")
                        .HasColumnType("date");

                    b.Property<string>("Holiday")
                        .HasColumnName("holiday")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("mHoliday");
                });

            modelBuilder.Entity("MySchool.Models.MLeaveType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(2);

                    b.Property<bool?>("Iscarryforward")
                        .HasColumnName("iscarryforward");

                    b.Property<string>("Leavetype")
                        .HasColumnName("leavetype")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("mLeaveType");
                });

            modelBuilder.Entity("MySchool.Models.MPayHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Head")
                        .HasColumnName("head")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("mPayHead");
                });

            modelBuilder.Entity("MySchool.Models.MPaymentModes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Modename")
                        .HasColumnName("modename")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("mPaymentModes");
                });

            modelBuilder.Entity("MySchool.Models.MRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Authid")
                        .HasColumnName("authid")
                        .HasMaxLength(50);

                    b.Property<string>("Displayname")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("displayname")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<int?>("Groupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("groupid")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Menuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menuid")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Parentid")
                        .HasColumnName("parentid");

                    b.Property<string>("Rname")
                        .HasColumnName("rname")
                        .HasMaxLength(50);

                    b.Property<int?>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("Url")
                        .HasColumnName("url");

                    b.Property<bool?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("Menuid");

                    b.ToTable("mRights");
                });

            modelBuilder.Entity("MySchool.Models.MRoleRights", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RightId")
                        .HasColumnName("right_id");

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("mRoleRights");
                });

            modelBuilder.Entity("MySchool.Models.MRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_created")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isadmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isadmin")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isdefault")
                        .HasColumnName("isdefault");

                    b.Property<string>("Rolename")
                        .HasColumnName("rolename")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("mRoles");
                });

            modelBuilder.Entity("MySchool.Models.MStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aadharno")
                        .HasColumnName("aadharno")
                        .HasMaxLength(15);

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<int?>("Associateuserid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("associateuserid")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datemodified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Desigid")
                        .HasColumnName("desigid");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Doj")
                        .HasColumnName("doj")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dol")
                        .HasColumnName("dol")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(13);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.Property<string>("Photo")
                        .HasColumnName("photo");

                    b.Property<string>("Staffname")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staffname")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(500);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Desigid");

                    b.HasIndex("Userid");

                    b.ToTable("mStaff");
                });

            modelBuilder.Entity("MySchool.Models.MStaffPayroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Head")
                        .HasColumnName("head")
                        .HasMaxLength(100);

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("mStaffPayroll");
                });

            modelBuilder.Entity("MySchool.Models.MSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("Datecreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("disabled")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("mSubjects");
                });

            modelBuilder.Entity("MySchool.Models.MTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<int?>("Friday")
                        .HasColumnName("friday");

                    b.Property<TimeSpan?>("Fromtime")
                        .HasColumnName("fromtime");

                    b.Property<int?>("Monday")
                        .HasColumnName("monday");

                    b.Property<int?>("Saturday")
                        .HasColumnName("saturday");

                    b.Property<int?>("Sunday")
                        .HasColumnName("sunday");

                    b.Property<int?>("Thursday")
                        .HasColumnName("thursday");

                    b.Property<TimeSpan?>("Totime")
                        .HasColumnName("totime");

                    b.Property<int?>("Tuesday")
                        .HasColumnName("tuesday");

                    b.Property<int?>("Wednesday")
                        .HasColumnName("wednesday");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.ToTable("mTimeTable");
                });

            modelBuilder.Entity("MySchool.Models.MUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aadharno")
                        .HasColumnName("aadharno")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Currentlogin")
                        .HasColumnName("currentlogin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_created")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_modified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnName("fname")
                        .HasMaxLength(50);

                    b.Property<bool>("IsAdmin")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsMasterAdmin")
                        .HasColumnName("is_master_admin");

                    b.Property<DateTime?>("Lastlogin")
                        .HasColumnName("lastlogin")
                        .HasColumnType("datetime");

                    b.Property<string>("Lname")
                        .HasColumnName("lname")
                        .HasMaxLength(50);

                    b.Property<string>("Mname")
                        .HasColumnName("mname")
                        .HasMaxLength(50);

                    b.Property<string>("Passverificationcode")
                        .HasColumnName("passverificationcode");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(500);

                    b.Property<string>("Photo")
                        .HasColumnName("photo");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(15);

                    b.Property<int>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("mUser");
                });

            modelBuilder.Entity("MySchool.Models.MWeeklyOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PosInMonth")
                        .HasColumnName("posInMonth")
                        .HasMaxLength(10);

                    b.Property<string>("Weekday")
                        .HasColumnName("weekday")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("mWeeklyOff");
                });

            modelBuilder.Entity("MySchool.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(500);

                    b.Property<string>("Appname")
                        .HasColumnName("appname")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(3);

                    b.Property<string>("Dbbackuppath")
                        .HasColumnName("dbbackuppath")
                        .HasMaxLength(500);

                    b.Property<string>("Key")
                        .HasColumnName("key");

                    b.Property<string>("Logo")
                        .HasColumnName("logo");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50);

                    b.Property<string>("Timezoneid")
                        .HasColumnName("timezoneid")
                        .HasMaxLength(150);

                    b.Property<string>("Token")
                        .HasColumnName("token");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MySchool.Models.SettingsOther", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Smskey")
                        .HasColumnName("smskey");

                    b.Property<string>("Smspassword")
                        .HasColumnName("smspassword");

                    b.Property<string>("Smsprofileid")
                        .HasColumnName("smsprofileid")
                        .HasMaxLength(50);

                    b.Property<string>("Smssenderid")
                        .HasColumnName("smssenderid")
                        .HasMaxLength(10);

                    b.Property<string>("Smsusername")
                        .HasColumnName("smsusername")
                        .HasMaxLength(50);

                    b.Property<string>("Smtpbccid")
                        .HasColumnName("smtpbccid")
                        .HasMaxLength(50);

                    b.Property<string>("Smtpemailid")
                        .HasColumnName("smtpemailid")
                        .HasMaxLength(50);

                    b.Property<bool>("Smtpenablessl")
                        .HasColumnName("smtpenablessl");

                    b.Property<string>("Smtphost")
                        .IsRequired()
                        .HasColumnName("smtphost")
                        .HasMaxLength(50);

                    b.Property<string>("Smtppassword")
                        .HasColumnName("smtppassword");

                    b.Property<int>("Smtpport")
                        .HasColumnName("smtpport");

                    b.HasKey("Id");

                    b.ToTable("SettingsOther");
                });

            modelBuilder.Entity("MySchool.Models.StaffAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("date");

                    b.Property<string>("Ispresent")
                        .HasColumnName("ispresent")
                        .HasMaxLength(2);

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("StaffAttendance");
                });

            modelBuilder.Entity("MySchool.Models.StaffAttendance1", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Month")
                        .HasColumnName("month");

                    b.Property<int>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.Property<string>("_1")
                        .HasMaxLength(2);

                    b.Property<string>("_10")
                        .HasMaxLength(2);

                    b.Property<string>("_11")
                        .HasMaxLength(2);

                    b.Property<string>("_12")
                        .HasMaxLength(2);

                    b.Property<string>("_13")
                        .HasMaxLength(2);

                    b.Property<string>("_14")
                        .HasMaxLength(2);

                    b.Property<string>("_15")
                        .HasMaxLength(2);

                    b.Property<string>("_16")
                        .HasMaxLength(2);

                    b.Property<string>("_17")
                        .HasMaxLength(2);

                    b.Property<string>("_18")
                        .HasMaxLength(2);

                    b.Property<string>("_19")
                        .HasMaxLength(2);

                    b.Property<string>("_2")
                        .HasMaxLength(2);

                    b.Property<string>("_20")
                        .HasMaxLength(2);

                    b.Property<string>("_21")
                        .HasMaxLength(2);

                    b.Property<string>("_22")
                        .HasMaxLength(2);

                    b.Property<string>("_23")
                        .HasMaxLength(2);

                    b.Property<string>("_24")
                        .HasMaxLength(2);

                    b.Property<string>("_25")
                        .HasMaxLength(2);

                    b.Property<string>("_26")
                        .HasMaxLength(2);

                    b.Property<string>("_27")
                        .HasMaxLength(2);

                    b.Property<string>("_28")
                        .HasMaxLength(2);

                    b.Property<string>("_29")
                        .HasMaxLength(2);

                    b.Property<string>("_3")
                        .HasMaxLength(2);

                    b.Property<string>("_30")
                        .HasMaxLength(2);

                    b.Property<string>("_31")
                        .HasMaxLength(2);

                    b.Property<string>("_4")
                        .HasMaxLength(2);

                    b.Property<string>("_5")
                        .HasMaxLength(2);

                    b.Property<string>("_6")
                        .HasMaxLength(2);

                    b.Property<string>("_7")
                        .HasMaxLength(2);

                    b.Property<string>("_8")
                        .HasMaxLength(2);

                    b.Property<string>("_9")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("StaffAttendance1");
                });

            modelBuilder.Entity("MySchool.Models.StaffLeaves", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("date");

                    b.Property<string>("Leavetype")
                        .HasColumnName("leavetype")
                        .HasMaxLength(2);

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("StaffLeaves");
                });

            modelBuilder.Entity("MySchool.Models.StaffSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Adjustments")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("adjustments")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datepaid")
                        .HasColumnName("datepaid")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Deductions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deductions")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Earnings")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("earnings")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Ispaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ispaid")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Month")
                        .HasColumnName("month");

                    b.Property<decimal?>("Netpay")
                        .HasColumnName("netpay");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.Property<int?>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.HasIndex("Userid");

                    b.ToTable("StaffSalary");
                });

            modelBuilder.Entity("MySchool.Models.StaffSalaryDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Head")
                        .HasColumnName("head")
                        .HasMaxLength(100);

                    b.Property<int?>("SsId")
                        .HasColumnName("ss_id");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("SsId");

                    b.HasIndex("Staffid");

                    b.ToTable("StaffSalaryDetails");
                });

            modelBuilder.Entity("MySchool.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aadharno")
                        .HasColumnName("aadharno")
                        .HasMaxLength(15);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(500);

                    b.Property<int?>("Castid")
                        .HasColumnName("castid");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datemodified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Fname")
                        .HasColumnName("fname")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasMaxLength(20);

                    b.Property<string>("GuardianRelation")
                        .HasColumnName("guardian_relation")
                        .HasMaxLength(50);

                    b.Property<long?>("Guardianid")
                        .HasColumnName("guardianid");

                    b.Property<string>("Lname")
                        .HasColumnName("lname")
                        .HasMaxLength(50);

                    b.Property<string>("Mname")
                        .HasColumnName("mname")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(15);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15);

                    b.Property<string>("Photo")
                        .HasColumnName("photo");

                    b.Property<string>("Prnno")
                        .HasColumnName("prnno")
                        .HasMaxLength(15);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Castid");

                    b.HasIndex("Guardianid");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("MySchool.Models.StudentGuardian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<bool>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<long>("Mobile")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<string>("Passverificationcode")
                        .HasColumnName("passverificationcode")
                        .HasMaxLength(8);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("StudentGuardian");
                });

            modelBuilder.Entity("MySchool.Models.TExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<string>("ExamName")
                        .HasColumnName("exam_name")
                        .HasMaxLength(500);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.ToTable("tExam");
                });

            modelBuilder.Entity("MySchool.Models.TExamMarkSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<int?>("Examid")
                        .HasColumnName("examid");

                    b.Property<int?>("ExmschId")
                        .HasColumnName("exmsch_id");

                    b.Property<string>("Grade")
                        .HasColumnName("grade")
                        .HasMaxLength(2);

                    b.Property<int?>("Obtained")
                        .HasColumnName("obtained");

                    b.Property<int?>("Practical")
                        .HasColumnName("practical");

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasMaxLength(10);

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Subjectid")
                        .HasColumnName("subjectid");

                    b.Property<int?>("Totalmarks")
                        .HasColumnName("totalmarks");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Examid");

                    b.HasIndex("ExmschId");

                    b.HasIndex("Studentid");

                    b.HasIndex("Subjectid");

                    b.ToTable("tExamMarkSheet");
                });

            modelBuilder.Entity("MySchool.Models.TExamSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("Endtime")
                        .HasColumnName("endtime");

                    b.Property<DateTime?>("Examdate")
                        .HasColumnName("examdate")
                        .HasColumnType("date");

                    b.Property<int>("Examid")
                        .HasColumnName("examid");

                    b.Property<int?>("Passingmarks")
                        .HasColumnName("passingmarks");

                    b.Property<TimeSpan?>("Starttime")
                        .HasColumnName("starttime");

                    b.Property<int?>("Subjectid")
                        .HasColumnName("subjectid");

                    b.Property<int?>("Totalmarks")
                        .HasColumnName("totalmarks");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Examid");

                    b.HasIndex("Subjectid");

                    b.ToTable("tExamSchedule");
                });

            modelBuilder.Entity("MySchool.Models.TExamStudentsAdmitCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_created")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<int?>("Examid")
                        .HasColumnName("examid");

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Examid");

                    b.HasIndex("Studentid");

                    b.ToTable("tExamStudentsAdmitCard");
                });

            modelBuilder.Entity("MySchool.Models.TLeaves", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Leaves")
                        .HasColumnName("leaves");

                    b.Property<long?>("Leavetypeid")
                        .HasColumnName("leavetypeid");

                    b.Property<int?>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Leavetypeid");

                    b.ToTable("tLeaves");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAdmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<bool?>("Cancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cancelled")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("Datecreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Rollno")
                        .HasColumnName("rollno");

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Studentid");

                    b.ToTable("tStudentAdmission");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAttendence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("Datecreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("datecreated")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Ispresent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ispresent")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Studentid");

                    b.ToTable("tStudentAttendence");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAttendence1", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<int?>("Month")
                        .HasColumnName("month");

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Year")
                        .HasColumnName("year");

                    b.Property<string>("_1")
                        .HasMaxLength(2);

                    b.Property<string>("_10")
                        .HasMaxLength(2);

                    b.Property<string>("_11")
                        .HasMaxLength(2);

                    b.Property<string>("_12")
                        .HasMaxLength(2);

                    b.Property<string>("_13")
                        .HasMaxLength(2);

                    b.Property<string>("_14")
                        .HasMaxLength(2);

                    b.Property<string>("_15")
                        .HasMaxLength(2);

                    b.Property<string>("_16")
                        .HasMaxLength(2);

                    b.Property<string>("_17")
                        .HasMaxLength(2);

                    b.Property<string>("_18")
                        .HasMaxLength(2);

                    b.Property<string>("_19")
                        .HasMaxLength(2);

                    b.Property<string>("_2")
                        .HasMaxLength(2);

                    b.Property<string>("_20")
                        .HasMaxLength(2);

                    b.Property<string>("_21")
                        .HasMaxLength(2);

                    b.Property<string>("_22")
                        .HasMaxLength(2);

                    b.Property<string>("_23")
                        .HasMaxLength(2);

                    b.Property<string>("_24")
                        .HasMaxLength(2);

                    b.Property<string>("_25")
                        .HasMaxLength(2);

                    b.Property<string>("_26")
                        .HasMaxLength(2);

                    b.Property<string>("_27")
                        .HasMaxLength(2);

                    b.Property<string>("_28")
                        .HasMaxLength(2);

                    b.Property<string>("_29")
                        .HasMaxLength(2);

                    b.Property<string>("_3")
                        .HasMaxLength(2);

                    b.Property<string>("_30")
                        .HasMaxLength(2);

                    b.Property<string>("_31")
                        .HasMaxLength(2);

                    b.Property<string>("_4")
                        .HasMaxLength(2);

                    b.Property<string>("_5")
                        .HasMaxLength(2);

                    b.Property<string>("_6")
                        .HasMaxLength(2);

                    b.Property<string>("_7")
                        .HasMaxLength(2);

                    b.Property<string>("_8")
                        .HasMaxLength(2);

                    b.Property<string>("_9")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Classid");

                    b.HasIndex("Studentid");

                    b.ToTable("tStudentAttendence1");
                });

            modelBuilder.Entity("MySchool.Models.TStudentFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount");

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<int?>("Classid")
                        .HasColumnName("classid");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FeesType")
                        .HasColumnName("fees_type")
                        .HasMaxLength(50);

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Studentid");

                    b.ToTable("tStudentFees");
                });

            modelBuilder.Entity("MySchool.Models.TStudentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("amount")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Batchid")
                        .HasColumnName("batchid");

                    b.Property<string>("Chtrno")
                        .HasColumnName("chtrno")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Mode")
                        .HasColumnName("mode")
                        .HasMaxLength(15);

                    b.Property<int?>("Studentid")
                        .HasColumnName("studentid");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Batchid");

                    b.HasIndex("Studentid");

                    b.ToTable("tStudentPayment");
                });

            modelBuilder.Entity("MySchool.Models.ClassFees", b =>
                {
                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("ClassFees")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_ClassFees_mStanderd");
                });

            modelBuilder.Entity("MySchool.Models.ClassSubjects", b =>
                {
                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tClassSubjects_mClasses");

                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_ClassSubjects_mStaff_Staffid");

                    b.HasOne("MySchool.Models.MSubjects", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("Subjectid")
                        .HasConstraintName("FK_tClassSubjects_mSubjects");
                });

            modelBuilder.Entity("MySchool.Models.ClassTeacher", b =>
                {
                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("ClassTeacher")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_ClassTeacher_mStanderd");

                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("ClassTeacher")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_ClassTeacher_Staff");

                    b.HasOne("MySchool.Models.MUser", "User")
                        .WithMany("ClassTeacher")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_ClassTeacher_mUser");
                });

            modelBuilder.Entity("MySchool.Models.DailyExpenses", b =>
                {
                    b.HasOne("MySchool.Models.MUser", "User")
                        .WithMany("DailyExpenses")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_DailyExpenses_mUser");
                });

            modelBuilder.Entity("MySchool.Models.LeaveApplication", b =>
                {
                    b.HasOne("MySchool.Models.MLeaveType", "Leavetype")
                        .WithMany("LeaveApplication")
                        .HasForeignKey("Leavetypeid")
                        .HasConstraintName("FK_LeaveApplication_mLeaveType");

                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("LeaveApplication")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_LeaveApplication_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.MClasses", b =>
                {
                    b.HasOne("MySchool.Models.MUser", "User")
                        .WithMany("MClasses")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_mStanderd_mUser");
                });

            modelBuilder.Entity("MySchool.Models.MessagesGuardians", b =>
                {
                    b.HasOne("MySchool.Models.StudentGuardian", "Guardian")
                        .WithMany("MessagesGuardians")
                        .HasForeignKey("Guardianid")
                        .HasConstraintName("FK_MessagesGuardians_StudentGuardian");

                    b.HasOne("MySchool.Models.Messages", "Message")
                        .WithMany("MessagesGuardians")
                        .HasForeignKey("Messageid")
                        .HasConstraintName("FK_MessageRecepients_Messages");
                });

            modelBuilder.Entity("MySchool.Models.MessagesStudents", b =>
                {
                    b.HasOne("MySchool.Models.Messages", "Message")
                        .WithMany("MessagesStudents")
                        .HasForeignKey("Messageid")
                        .HasConstraintName("FK_MessagesStudents_Messages");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("MessagesStudents")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_MessagesStudents_Student");
                });

            modelBuilder.Entity("MySchool.Models.MRights", b =>
                {
                    b.HasOne("MySchool.Models.Menu", "Menu")
                        .WithMany("MRights")
                        .HasForeignKey("Menuid")
                        .HasConstraintName("FK_mRights_Menu");
                });

            modelBuilder.Entity("MySchool.Models.MRoleRights", b =>
                {
                    b.HasOne("MySchool.Models.MRights", "Right")
                        .WithMany("MRoleRights")
                        .HasForeignKey("RightId")
                        .HasConstraintName("FK_mRoleRights_mRights");

                    b.HasOne("MySchool.Models.MRoles", "Role")
                        .WithMany("MRoleRights")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_mRoleRights_mRoles");
                });

            modelBuilder.Entity("MySchool.Models.MStaff", b =>
                {
                    b.HasOne("MySchool.Models.MDesignation", "Desig")
                        .WithMany("MStaff")
                        .HasForeignKey("Desigid")
                        .HasConstraintName("FK_Staff_mDesignation");

                    b.HasOne("MySchool.Models.MUser", "User")
                        .WithMany("MStaff")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_Staff_mUser");
                });

            modelBuilder.Entity("MySchool.Models.MStaffPayroll", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("MStaffPayroll")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_mStaffPayroll_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.MSubjects", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("MSubjects")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_mSubjects_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.MTimeTable", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("MTimeTable")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_TimeTable_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("MTimeTable")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_TimeTable_mClasses");
                });

            modelBuilder.Entity("MySchool.Models.MUser", b =>
                {
                    b.HasOne("MySchool.Models.MRoles", "Role")
                        .WithMany("MUser")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_mUser_mRoles");
                });

            modelBuilder.Entity("MySchool.Models.StaffAttendance", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("StaffAttendance")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_StaffAttendance_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.StaffAttendance1", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("StaffAttendance1")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_StaffAttendance1_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.StaffLeaves", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("StaffLeaves")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_StaffLeaves_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.StaffSalary", b =>
                {
                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("StaffSalary")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_StaffSalary_mStaff");

                    b.HasOne("MySchool.Models.MUser", "User")
                        .WithMany("StaffSalary")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_StaffSalary_mUser");
                });

            modelBuilder.Entity("MySchool.Models.StaffSalaryDetails", b =>
                {
                    b.HasOne("MySchool.Models.StaffSalary", "Ss")
                        .WithMany("StaffSalaryDetails")
                        .HasForeignKey("SsId")
                        .HasConstraintName("FK_StaffSalaryDetails_StaffSalary");

                    b.HasOne("MySchool.Models.MStaff", "Staff")
                        .WithMany("StaffSalaryDetails")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_StaffSalaryDetails_mStaff");
                });

            modelBuilder.Entity("MySchool.Models.Student", b =>
                {
                    b.HasOne("MySchool.Models.MCast", "Cast")
                        .WithMany("Student")
                        .HasForeignKey("Castid")
                        .HasConstraintName("FK_Student_mCast");

                    b.HasOne("MySchool.Models.StudentGuardian", "Guardian")
                        .WithMany("Student")
                        .HasForeignKey("Guardianid")
                        .HasConstraintName("FK_Student_StudentGuardian");
                });

            modelBuilder.Entity("MySchool.Models.TExam", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TExam")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tExam_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TExam")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tExam_mClasses");
                });

            modelBuilder.Entity("MySchool.Models.TExamMarkSheet", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tExamMarkSheet_Batches1");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tExamMarkSheet_mClasses");

                    b.HasOne("MySchool.Models.TExam", "Exam")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("Examid")
                        .HasConstraintName("FK_tExamMarkSheet_mExams");

                    b.HasOne("MySchool.Models.TExamSchedule", "Exmsch")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("ExmschId")
                        .HasConstraintName("FK_tExamMarkSheet_tExamSchedule");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tExamMarkSheet_Student");

                    b.HasOne("MySchool.Models.MSubjects", "Subject")
                        .WithMany("TExamMarkSheet")
                        .HasForeignKey("Subjectid")
                        .HasConstraintName("FK_tExamMarkSheet_mSubjects");
                });

            modelBuilder.Entity("MySchool.Models.TExamSchedule", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TExamSchedule")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tExamSchedule_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TExamSchedule")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tExamSchedule_mClasses1");

                    b.HasOne("MySchool.Models.TExam", "Exam")
                        .WithMany("TExamSchedule")
                        .HasForeignKey("Examid")
                        .HasConstraintName("FK_tExamSchedule_mExams1");

                    b.HasOne("MySchool.Models.MSubjects", "Subject")
                        .WithMany("TExamSchedule")
                        .HasForeignKey("Subjectid")
                        .HasConstraintName("FK_tExamSchedule_mSubjects");
                });

            modelBuilder.Entity("MySchool.Models.TExamStudentsAdmitCard", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TExamStudentsAdmitCard")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tExamStudentsAdmitCard_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TExamStudentsAdmitCard")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tExamStudentsAdmitCard_mClasses");

                    b.HasOne("MySchool.Models.TExam", "Exam")
                        .WithMany("TExamStudentsAdmitCard")
                        .HasForeignKey("Examid")
                        .HasConstraintName("FK_tExamStudentsAdmitCard_tExam");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TExamStudentsAdmitCard")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tExamStudentsAdmitCard_Student");
                });

            modelBuilder.Entity("MySchool.Models.TLeaves", b =>
                {
                    b.HasOne("MySchool.Models.MLeaveType", "Leavetype")
                        .WithMany("TLeaves")
                        .HasForeignKey("Leavetypeid")
                        .HasConstraintName("FK_tLeaves_mLeaveType");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAdmission", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TStudentAdmission")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tStudentAdmission_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TStudentAdmission")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tAdmission_mStanderd");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TStudentAdmission")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tAdmission_Student");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAttendence", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TStudentAttendence")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tStudentAttendence_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TStudentAttendence")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tStudentPresenty_mClasses");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TStudentAttendence")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tStudentPresenty_Student");
                });

            modelBuilder.Entity("MySchool.Models.TStudentAttendence1", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TStudentAttendence1")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tStudentAttendence1_Batches");

                    b.HasOne("MySchool.Models.MClasses", "Class")
                        .WithMany("TStudentAttendence1")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_tStudentAttendence1_mClasses");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TStudentAttendence1")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tStudentAttendence1_Student");
                });

            modelBuilder.Entity("MySchool.Models.TStudentFees", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TStudentFees")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tStudentFees_Batches");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TStudentFees")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tStudentFees_Student");
                });

            modelBuilder.Entity("MySchool.Models.TStudentPayment", b =>
                {
                    b.HasOne("MySchool.Models.Batches", "Batch")
                        .WithMany("TStudentPayment")
                        .HasForeignKey("Batchid")
                        .HasConstraintName("FK_tStudentPayment_Batches");

                    b.HasOne("MySchool.Models.Student", "Student")
                        .WithMany("TStudentPayment")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_tStudentPayment_Student");
                });
#pragma warning restore 612, 618
        }
    }
}
